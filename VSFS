#!/usr/bin/env python3

import os
import sys
import re

# Define variables
MIN_NUM_COMMAND = 3
MAX_NUM_COMMAND = 5

# Error codes
ENOENT = 2 # No such file or directory
ENOEXEC = 8 # Exec format error
EEXIST = 17 # File exists
EINVAL = 22 # Invalid argument

# Check external file EF
def check_EF(EF):
    valid = False

    try:
        # Check if EF is existent
        file = open(EF, 'r')
        valid = os.path.isfile(EF)
        file.close()
    # Catch err
    except IOError as err:
        error = "Invalid VSFS - " + str(err)[10:] + "\n"
        sys.stderr.write(error)
        exit(err.errno)

    return valid

# Check file system FS
def check_FS(FS):
    valid = False
    try:
        # Check if FS is existent
        os.path.isfile(FS)
        file = open(FS, 'r')
        valid = True

        # Check the first line of FS is 'NOTES V1.0\n'
        if (valid and file.readline() != "NOTES V1.0\n"):
            error = "Invalid VSFS - invalid file system: '" + FS + "'\n"
            sys.stderr.write(error)
            exit(ENOEXEC)
            
        file.close()
    # Catch err
    except IOError as err:
        error = "Invalid VSFS - " + str(err)[10:] + "\n"
        sys.stderr.write(error)
        exit(err.errno)
    
    return valid

# Check internal directory ID
def check_ID(COMMAND, FS, ID):
    file = open(FS, 'r')
    lines = file.readlines()
    valid = False

    # Check if the last word of ID is '/' as it is optional
    if(ID[-1] == "/"):
        ID = ID[0:-1]

    # Check if the first or last word of ID is '/'
    if (ID[0] != "/"):
        if (COMMAND == "mkdir"):
            # ID should not exist
            if (lines.count("=" + ID + "/\n") == 1):
                error = "Invalid VSFS - mkdir: cannot create directory '" + ID + "': File exists\n"
                sys.stderr.write(error)
                exit(EEXIST)
            else:
                valid = True
        elif (COMMAND == "rmdir"):
            # ID should exist
            if (lines.count("=" + ID + "/\n") == 1):
                valid = True
            else:
                error = "Invalid VSFS - rmdir: failed to remove '" + ID + "': No such file or directory\n"
                sys.stderr.write(error)
                exit(ENOENT)
    else:
        error = "Invalid VSFS - Internal directory name should not start with '/': '" + ID + "'\n"
        sys.stderr.write(error)
        exit(EINVAL)

    file.close()
    
    return valid

# Check internal file IF
def check_IF(COMMAND, FS, IF):
    file = open(FS, 'r')
    lines = file.readlines()
    valid = False

    # Check if the first or last word of IF is '/'
    if (IF[0] != "/" and IF[-1] != "/"):
        if (COMMAND == "copyin"):
            valid = True
            # IF already exists, then remove the original file
            # if (lines.count("@" + IF + "\n") == 1):
            #     # rm(FS, IF)
        elif (COMMAND == "copyout" or COMMAND == "rm"):
            # IF should exist 
            if (lines.count("@" + IF + "\n") == 1):
                valid = True
            else:
                error = "Invalid VSFS - No such file for directory: '" + IF + "'\n"
                sys.stderr.write(error)
                exit(ENOENT)
    else:
        error = "Invalid VSFS - Internal file name should not start with '/' and not end with '/': '" + IF + "'\n"
        sys.stderr.write(error)
        exit(EINVAL)
    file.close()

    return valid

# List the contents of FS in 'ls -lR' format 
def list(FS, dir, is_last_dir):
    file_info = "file_info"
    command = "ls -l " + FS + " > " + file_info
    os.system(command)
    # Save the information of FS
    ls_command_result = open(file_info, 'r').read().split()
    os.remove(file_info)

    attribute = (ls_command_result[0])[1:]
    owner = ls_command_result[2]
    group = ls_command_result[3]
    month = ls_command_result[5]
    day = ls_command_result[6]
    time = ls_command_result[7]

    file = open(FS, 'r')
    lines = file.readlines()
    if (dir == "current"):
        for index, line in enumerate(lines):
            # Check files
            # Ex) a file on current directory is @note1
            if (line[0] == "@" and line.count("/") == 0):
                # Check the size how many lines in the file
                file_size = 0
                file_index = index
                while(True):
                    if (file_index < len(lines) - 1 and lines[file_index + 1][0].isspace()):
                        file_size += len(lines[file_index + 1][1:])
                        file_index += 1
                    else:
                        break
                # Print file information    
                print("-" + attribute, "%3s"%1, owner, group, file_size, month, day, time, line[1:], end = '')
            # Check directories
            # Ex) a directory on current directory is =dir1/
            elif (line[0] == "=" and line.count("/") == 1 and line.find("/") + 1 == line.find("\n")):
                # Print directory information
                print("d" + attribute, check_number_of_subdir(FS, line[1:-2]), owner, group, 0, month, day, time, line[1:-1])
    else:
        for index, line in enumerate(lines):
            # Check files
            # Ex) a file on a sub directory is @dir1/note when dir is dir1
            if (line[0] == "@" and line.count("/") == dir.count("/") + 1 and line.find(dir) == 1):
                # Check the size how many lines in the file
                file_size = 0
                file_index = index
                while(True):
                    if (file_index < len(lines) - 1 and lines[file_index + 1][0].isspace()):
                        file_size += len(lines[file_index + 1][1:])
                        file_index += 1
                    else:
                        break
                # Print file information  
                print("-" + attribute, "%3s"%1, owner, group, file_size, month, day, time, line[1:], end = '')
            # Check directories
            # Ex) a directory on a sub directory is =dir1/dir2/ when dir is dir1
            elif (line[0] == "=" and line.count("/") == dir.count("/") + 2 and line.find(dir) == 1):
                # Print directory inforamtion
                print("d" + attribute, check_number_of_subdir(FS, line[1:-2]), owner, group, 0, month, day, time, line[1:-1])
    
    file.close()

# Check total number of subdirectories of current directory
def check_number_of_subdir(FS, dir):
    total_number_of_subdir = 0
    file = open(FS, 'r')
    lines = file.readlines()
    for line in lines:
        # Check directories
        if (line[0] == "="):
            # 1 condition Ex) line is dir1/dir2/ and dir is dir1, then dir1 has dir2 as a sub directory 
            # 2 condition Ex) line is dir1/dir2/ and dir is dir2, then it is not sub directory
            if (line.count("/") == dir.count("/") + 2 and line.find(dir) == 1):
                total_number_of_subdir += 1

    # Make empty directory visible in mc
    if(total_number_of_subdir == 0):
        total_number_of_subdir = 1
        
    file.close()
    return total_number_of_subdir

# Check all subdirectories recursively 
def check_subdir(FS):
    dirs = ['current']
    file = open(FS, 'r')
    lines = file.readlines()
    for line in lines:
        # Check directories
        if (line[0] == "="):
            dirs.append(line[1:-2])

    file.close()
    return sorted(dirs)

# Copy the external file, EF, into the FS as internal file named IF
def copyin(FS, EF, IF):
    EF_file = open(EF, 'r')
    EF_lines = EF_file.readlines()
    newlines = []
    total_length = 0

    # Check content of EF
    for line in EF_lines:
        total_length += len(line)
        if (total_length > 255):
            newlines.append(line[total_length:255 - total_length])
        else:
            newlines.append(line)
    
    EF_file.close()

    IF_file = open(FS, 'a+')

    IF_lines = IF_file.readlines()
    # Check subdirectories already exist
    index = [m.start() for m in re.finditer(r"/", IF)]
    for i in range(len(index)):
        if (IF_lines.count("=" + IF[0:index[i]] + "/\n") == 0):
            IF_file.write("=" + IF[0:index[i]] + "/\n")
        
    # Write @IF
    IF_file.write("@" + IF + "\n")

    # Copy the content of EF into the IF with empty space at the start
    for line in newlines:
        IF_file.write(" " + line)

    IF_file.close()

    # Check if there already exists IF
    IF_file = open(FS, 'r')
    IF_lines = IF_file.readlines()
    # IF already exists, then remove the original file
    if (IF_lines.count("@" + IF + "\n") == 2):
        rm(FS, IF)    
    
    IF_file.close()

# Copy the internal file IF within FS to external file EF
def copyout(FS, IF, EF):
    
    IF_file = open(FS, 'r')
    EF_file = open(EF, 'w')
    IF_lines = IF_file.readlines()
    
    for index, line in enumerate(IF_lines):
        file_index = index
        # Find IF
        if(line[1:-1] == IF):
            # Find the content of the IF
            while(True):
                if (file_index < len(IF_lines) - 1 and IF_lines[file_index + 1][0].isspace()):
                    # Write the content into EF
                    EF_file.write(IF_lines[file_index + 1][1:])
                    file_index += 1
                else:
                    break

# Create empty internal directory ID in FS
def mkdir(FS, ID):
    file = open(FS, 'a+')

    # Check if the last word of ID is '/'
    if (ID[-1] == "/"):
        ID = ID[0:-1]

    # Move cursor to the start to check last location of cursor is starting at the end of new line
    file.seek(0)
    lines = file.readlines()
    if (lines[-1][-1].isspace() is False):
        file.write("\n")

    # Check subdirectories already exist
    # Ex) ID is dir1/dir2/dir3, then index of '/' is 4 and 9
    index = [m.start() for m in re.finditer(r"/", ID)]
    for i in range(len(index)):
        # Check all sub directories such as dir1 and dir1/dir2 whether they already exist
        if (lines.count("=" + ID[0:index[i]] + "/\n") == 0):
            # If the sub directory doesn't exist, then create it 
            file.write("=" + ID[0:index[i]] + "/\n")
    
    # Make ID such as dir1/dir2/dir3
    file.write("=" + ID + "/\n")
    file.close()

# Remove internal file IF from FS
def rm(FS, IF):

    file = open(FS, 'r+')
    lines = file.readlines()
    newlines = ""
    # To check how many lines need to be deleted
    count = 0
    # Delete first one in case replace IF
    found = False

    for index, line in enumerate(lines):
        # Check where IF is and put them in newlines to overwrite
        if (line[1:-1] == IF and count == 0 and not found):
            # write the line needs to be deleted into newlines
            newlines += "#" + line[1:]
            file_index = index
            count += 1
            # Check next lines until meets another file or directory
            while(True):
                if (file_index < len(lines) - 1 and lines[file_index + 1][0].isspace()):
                    newlines += "#" + lines[file_index + 1][1:]
                    file_index += 1
                    count += 1
                else:
                    found = True
                    break
        # If count is not 0, then it means the lines are added into newlines, so don't add them again
        elif (count == 0):
            newlines += line

        # If count is not 0, then skip the line
        if (count != 0):
            count -= 1
            
    # Move cursor to the start
    file.seek(0)
    # Overwrite with newlines
    file.write(newlines)
    file.close()

# Create empty internal directory ID in FS
def rmdir(FS, ID):
    file = open(FS, 'r+')
    lines = file.readlines()
    newlines = ""
    # To check how many lines need to be deleted
    count = 0

    # Check if the last word of ID is '/'
    if (ID[-1] == "/"):
        ID = ID[0:-1]

    for index, line in enumerate(lines):
        # Check if any sub directories of ID exist, then put them in newlines to overwrite
        # Ex) line is =dir1/dir2/dir1/dir2/ and ID is dir1/dir2
        if (line[1:-1].count(ID) >= 1 and line.find(ID) == 1 and count == 0):
            # write the line needs to be deleted into newlines
            newlines += "#" + line[1:]
            file_index = index
            count += 1
            # Check next lines until meets another file or directory
            while(True):
                if (file_index < len(lines) - 1 and lines[file_index + 1][0].isspace()):
                    newlines += "#" + lines[file_index + 1][1:]
                    file_index += 1
                    count += 1
                else:
                    break
        # If count is not 0, then it means the lines are added into newlines, so don't add them again
        elif (count == 0):
            newlines += line

        # If count is not 0, then skip the line
        if (count != 0):
            count -= 1

    # Move cursor to the start
    file.seek(0)
    # Overwrite with newlines
    file.write(newlines)
    file.close()

# Check internal file
def defrag(FS):
    file = open(FS, 'r')
    lines = file.readlines()
    count = 0
    newlines = ""

    # Find lines starting with '#'
    for line in lines:
        if (line[0] == "#"):
            count += 1
        # If count is not 0, then it means the lines are added into newlines, so don't add them again
        elif (count == 0):
            newlines += line

        # If count is not 0, then skip the line
        if (count != 0):
            count -= 1
    file.close()

    file = open(FS, 'w')
    file.seek(0)
    # Overwrite with newlines
    file.write(newlines)

    file.close()

# Start VSFS program here
# When the number of argument is valid 
if (MIN_NUM_COMMAND <= len(sys.argv) and MAX_NUM_COMMAND >= len(sys.argv)):
    # VSFS list FS    
    if (sys.argv[1] == "list" and len(sys.argv) == 3):
        # Check if FS exists
        if(check_FS(sys.argv[2])):
            dirs = check_subdir(sys.argv[2])
            # Print a list of each directory one by one
            for dir in dirs:
                list(sys.argv[2], dir, dir == dirs[-1])     
    # VSFS copyin FS EF IF        
    elif (sys.argv[1] == "copyin" and len(sys.argv) == 5):
        if (check_FS(sys.argv[2]) and check_EF(sys.argv[3]) and check_IF(sys.argv[1], sys.argv[2], sys.argv[4])):
            copyin(sys.argv[2], sys.argv[3], sys.argv[4]) 
    # VSFS copyout FS IF EF
    elif (sys.argv[1] == "copyout" and len(sys.argv) == 5):
        if (check_FS(sys.argv[2]) and check_IF(sys.argv[1], sys.argv[2], sys.argv[3]) and check_EF(sys.argv[4])):
            copyout(sys.argv[2], sys.argv[3], sys.argv[4])
    # VSFS mkdir FS ID   
    elif (sys.argv[1] == "mkdir" and len(sys.argv) == 4):
        if (check_FS(sys.argv[2]) and check_ID(sys.argv[1], sys.argv[2], sys.argv[3])):
            mkdir(sys.argv[2], sys.argv[3])
    # VSFS rm FS IF        
    elif (sys.argv[1] == "rm" and len(sys.argv) == 4):
        if (check_FS(sys.argv[2]) and check_IF(sys.argv[1], sys.argv[2], sys.argv[3])):
            rm(sys.argv[2], sys.argv[3])
    # VSFS rmdir FS ID   
    elif (sys.argv[1] == "rmdir" and len(sys.argv) == 4):
        if (check_FS(sys.argv[2]) and check_ID(sys.argv[1], sys.argv[2], sys.argv[3])):
            rmdir(sys.argv[2], sys.argv[3])
    # VSFS defrag FS        
    elif (sys.argv[1] == "defrag" and len(sys.argv) == 3):
        if(check_FS(sys.argv[2])):
            defrag(sys.argv[2])
    # VSFS index FS        
    elif (sys.argv[1] == "index" and len(sys.argv) == 3):
        if(check_FS(sys.argv[2])):
            print("Not required")
    else:
        error = "Invalid VSFS - VSFS: invalid option -- '" + ' '.join(str(list) for list in sys.argv[1:]) + "'\nPlease check 'man' page for more information.\n"
        sys.stderr.write(error)
        exit(EINVAL)
# when argument is only ./VSFS        
elif (len(sys.argv) == 1):
    error = "Invalid VSFS - VSFS: require a valid option\nPlease check 'man' page for more information.\n" 
    sys.stderr.write(error)
    exit(EINVAL)
# When argument is too short or too long    
else:
    error = "Invalid VSFS - VSFS: invalid option -- '" + ' '.join(str(list) for list in sys.argv[1:]) + "'\nPlease check 'man' page for more information.\n"
    sys.stderr.write(error)
    exit(EINVAL)

exit(0)